<?phpnamespace Drupal\audiodescription\Form;use Brevo\Client\Api\ContactsApi;use Brevo\Client\Configuration;use Brevo\Client\Model\CreateContact;use Drupal\Core\Form\FormBase;use Drupal\Core\Form\FormStateInterface;use Drupal\Core\Render\Markup;use Exception;use GuzzleHttp\Client;use Symfony\Component\DependencyInjection\ContainerInterface;use Drupal\config_pages\ConfigPagesLoaderServiceInterface;/** * Provides a form for searching movies. */class NewsletterUnsubscriptionForm extends FormBase {  /**   * The config pages loader service.   *   * @var \Drupal\config_pages\ConfigPagesLoaderServiceInterface   */  protected $configPagesLoader;  public function __construct(ConfigPagesLoaderServiceInterface $configPagesLoader) {    $this->configPagesLoader = $configPagesLoader;  }  /**   * {@inheritdoc}   */  public static function create(ContainerInterface $container) {    return new self(      $container->get('config_pages.loader'),    );  }  /**   * {@inheritdoc}   */  public function getFormId() {    return 'newsletter_unsubscription_form';  }  /**   * {@inheritdoc}   */  public function buildForm(array $form, FormStateInterface $form_state) {    $form['email'] = [      '#type' => 'textfield',      '#title' => $this->t('Adresse e-mail à désinscrire (champ obligatoire)'),      '#size' => 30,      '#maxlength' => 128,      '#required' => true,      '#description' => 'exemple : prenom.nom@gmail.com',      '#attributes' => [        'class' => [          'fr-col-12 fr-col-md-6',        ],      ],    ];    $form['submit'] = [      '#type' => 'submit',      '#value' => $this->t("Se désinscrire"),      '#attributes' => [        'class' => [          'fr-btn',        ],      ],    ];    return $form;  }  /**   * {@inheritdoc}   */  public function submitForm(array &$form, FormStateInterface $form_state) {    $config_pages = $this->configPagesLoader;    $newsletter = $config_pages->load('newsletter');    $apiKey = $newsletter->get('field_news_api_key')->value;    $config = Configuration::getDefaultConfiguration()->setApiKey('api-key', $apiKey);    $apiInstance = new ContactsApi(      new Client(),      $config    );    $email = $form_state->getUserInput()['email'];    $identifierType = "email_id";    try {      $apiInstance->deleteContact($email, $identifierType);      $form_state->setRedirect('audiodescription.newsletter.unsubscription.confirmation');    } catch (Exception $e) {      echo 'Exception when calling ContactsApi->createContact: ', $e->getMessage(), PHP_EOL;    }  }}