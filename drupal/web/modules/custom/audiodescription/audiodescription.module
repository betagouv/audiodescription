<?php

/**
 * @file
 * Contains audiodescription module-related hooks.
 */

use Drupal\Core\Block\BlockPluginInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\node\Entity\Node;

/**
 * Implements hook_theme().
 */
function audiodescription_theme($existing, $type, $theme, $path) {
  return [
    'homepage' => [
      'render element' => 'children',
      'template' => 'homepage',
      'path' => $path . '/templates',
      'variables' => [
        'header' => NULL,
        'infos' => NULL,
        'about' => NULL,
        'highlighted_collections' => NULL,
        'collections' => NULL,
        'search_form' => NULL,
        'last_movies' => NULL,
      ],
    ],
    'hp_highlighted_collections_block' => [
      'render element' => 'children',
      'template' => 'hp-highlighted-collections-block',
      'path' => $path . '/templates',
      'variables' => [
        'collections' => NULL,
      ],
    ],
    'hp_collections_block' => [
      'render element' => 'children',
      'template' => 'hp-collections-block',
      'path' => $path . '/templates',
      'variables' => [
        'collections' => NULL,
        'collection_genres' => NULL,
        'title' => NULL,
      ],
    ],
    'hp_last_movies_block' => [
      'render element' => 'children',
      'template' => 'hp-last-movies-block',
      'path' => $path . '/templates',
      'variables' => [
        'title' => NULL,
        'description' => NULL,
        'cta' => NULL,
        'movies' => NULL,
      ],
    ],
    'movies_contact_block' => [
      'render element' => 'children',
      'template' => 'movies-contact-block',
      'path' => $path . '/templates',
      'variables' => [
        'title' => NULL,
        'description' => NULL,
        'email' => NULL,
        'pre_contact' => NULL,
        'image' => NULL,
      ],
    ],
    'search_contact_block' => [
      'render element' => 'children',
      'template' => 'search-contact-block',
      'path' => $path . '/templates',
      'variables' => [
        'title' => NULL,
        'description' => NULL,
        'pre_contact' => NULL,
        'email' => NULL,
      ],
    ],
    'info_banner_block' => [
      'render element' => 'children',
      'template' => 'info_banner-block',
      'path' => $path . '/templates',
      'variables' => [
        'title' => NULL,
        'description' => NULL,
      ],
    ],
    'movie_search' => [
      'render element' => 'children',
      'template' => 'movie-search',
      'path' => $path . '/templates',
      'variables' => [
        'movies' => NULL,
        'form' => NULL,
        'filtersForm' => NULL,
        'filtersExpanded' => NULL,
        'filters' => NULL,
        'blockContact' => NULL,
      ],
    ],
    'header_search_form_block' => [
      'render element' => 'children',
      'template' => 'header-search-form-block',
      'path' => $path . '/templates',
      'variables' => [
        'form' => NULL,
      ],
    ],
    'error_403' => [
      'render element' => 'children',
      'template' => 'error-403',
      'path' => $path . '/templates',
    ],
    'error_404' => [
      'render element' => 'children',
      'template' => 'error-404',
      'path' => $path . '/templates',
    ],

    'back_to_top_block' => [
      'variables' => [
        'custom_data' => [],
        'custom_string' => '',
      ],
    ],
  ];
}

/**
 * ImplÃ©mentation de hook_block_view_alter().
 */
function audiodescription_block_view_alter(array &$build, BlockPluginInterface $block) {

  $current_route = \Drupal::routeMatch()->getRouteName();

  $routes = [
    'audiodescription.error.403',
    'audiodescription.error.404',
  ];

  if (in_array($current_route, $routes)) {
    $blocks = [
      'system_breadcrumb_block',
      'page_title_block',
      'back_to_top_block',
    ];

    if (in_array($block->getBaseId(), $blocks)) {
      $build = [];
    }
  }
}

function audiodescription_node_update(EntityInterface $entity) {
  // Invalidate taxonmy terms Collection with movie $entity.
  if ($entity->getEntityTypeId() === 'node' && $entity->bundle() === 'movie') {
    $query = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->getQuery()
      ->condition('vid', 'collection')
      ->condition('field_taxo_movies', $entity->id())
      ->accessCheck(FALSE);

    $term_ids = $query->execute();

    if (!empty($term_ids)) {
      $cache_tags = [];

      foreach ($term_ids as $term_id) {
        $cache_tags[] = "taxonomy_term:{$term_id}";
      }

      if (!empty($cache_tags)) {
        \Drupal::service('cache_tags.invalidator')->invalidateTags($cache_tags);
      }
    }
  }
}
