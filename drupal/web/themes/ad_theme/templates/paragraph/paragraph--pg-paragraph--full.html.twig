{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
  'paragraph',
  'paragraph--type--' ~ paragraph.bundle|clean_class,
  view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
  not paragraph.isPublished() ? 'paragraph--unpublished',
  'fr-container',
  'fr-pt-3w',
  'fr-pt-md-7w',
  'fr-pb-3w',
  'fr-pb-md-7w',
  'pg-paragraph'
]
%}
{% block paragraph %}
  <div class="block">
    <div{{ attributes.addClass(classes) }}>
      {% block content %}
        {% set image = paragraph.field_pg_image.entity.field_media_image.entity.uri.value %}

        {% if image is not empty %}
          <div class="fr-grid-row fr-grid-row--gutters">
            <div class="fr-col-12 fr-col-md-6">
              {% if paragraph.field_pg_image_is_decorative.value %}
                {% set alt = "" %}
              {% else %}
                {% set alt = paragraph.field_pg_image.entity.field_media_image.alt %}
              {% endif %}
              <img src="{{ file_url(image) }}" alt="{{ alt }}" class="pg-paragraph__image"/>
            </div>
            <div class="fr-col-12 fr-col-md-6">
        {% endif %}
              <h2>{{ paragraph.field_pg_title.value }}</h2>
              {{ paragraph.field_pg_text.value|raw }}

              {% if paragraph.field_pg_cta.entity.field_pg_link.title is not empty %}
                {% if cta.title %}
                  {% set pg_cta = pattern('button', {
                    label: cta.text,
                    title: cta.title,
                    url: cta.url,
                    target: cta.target,
                    external: cta.external
                  }, cta.style) %}
                {% else %}
                  {% set pg_cta = pattern('button', {
                    label: cta.text,
                    url: cta.url,
                    target: cta.target,
                    external: cta.external
                  }, cta.style) %}
                {% endif %}

                {{ pg_cta }}
              {% endif %}
        {% if image is not empty %}
            </div>
          </div>
        {% endif %}
      {% endblock %}
    </div>
  </div>
{% endblock paragraph %}
