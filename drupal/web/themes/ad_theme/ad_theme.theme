<?php

/**
 * @file
 * Contains theme-related hooks and preprocess functions.
 */

declare(strict_types=1);

use Drupal\block\Entity\Block;
use Drupal\Core\Cache\CacheableMetadata;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function ad_theme_theme_suggestions_taxonomy_term_alter(
  array &$suggestions,
  array $variables,
) {
  $term = $variables['elements']['#taxonomy_term'];
  $view_mode = $variables['elements']['#view_mode'];

  $suggestions[] = 'taxonomy_term__' . $view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->bundle() . '__' . $view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->id() . '__' . $view_mode;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Add views template suggestions.
 *
 * @inheritdoc
 */
function ad_theme_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {
  $view_id = $variables['view']->id();
  $view_current_display = $variables['view']->current_display;

  $suggestions[] = 'views_view__' . $view_current_display;
  $suggestions[] = 'views_view__' . $view_id;
  $suggestions[] = 'views_view__' . $view_id . '__' . $view_current_display;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function ad_theme_theme_suggestions_page_title_alter(array &$suggestions, array &$variables) {
  if (\Drupal::routeMatch()->getRouteName() === 'entity.node.canonical') {
    $node = \Drupal::routeMatch()->getParameter('node');

    if ($node instanceof NodeInterface) {
      $bundle = $node->bundle();
      $suggestions[] = 'page_title__' . $bundle;

      $view_mode = \Drupal::routeMatch()->getParameter('view_mode') ?? 'full';
      $suggestions[] = 'page_title__' . $view_mode;
      $suggestions[] = 'page_title__' . $bundle . '__' . $view_mode;
    }
  }

  if  (\Drupal::routeMatch()->getRouteName() === 'entity.taxonomy_term.canonical') {
    $term = \Drupal::routeMatch()->getParameter('taxonomy_term');
    $vid = $term->bundle();
    $suggestions[] = 'page_title__' . $vid;

    $view_mode = \Drupal::routeMatch()->getParameter('view_mode') ?? 'full';
    $suggestions[] = 'page_title__' . $view_mode;
    $suggestions[] = 'page_title__' . $vid . '__' . $view_mode;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function ad_theme_theme_suggestions_views_view_unformatted_alter(array &$suggestions, array &$variables) {
  $view_id = $variables['view']->id();
  $view_current_display = $variables['view']->current_display;

  $suggestions[] = 'views_view_unformatted__' . $view_current_display;
  $suggestions[] = 'views_view_unformatted__' . $view_id;
  $suggestions[] = 'views_view_unformatted__' . $view_id . '__' . $view_current_display;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function ad_theme_theme_suggestions_form_element_alter(array &$suggestions, array &$variables) {
if (
  (array_key_exists('#name', $variables['element'])) &&
  ($variables['element']['#name'] === 'search')
) {
    $suggestions[] = 'form_element__search';
  }
}

function ad_theme_theme_suggestions_input_alter(array &$suggestions, array &$variables) {
  if ($variables['element']['#name'] === 'search') {
    $suggestions[] = 'input__search';
  }

  if ($variables['theme_hook_original'] === 'input__submit') {
    $suggestions[] = 'input__submit__search_submit';
    $suggestions[] = 'input__submit__search';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function ad_theme_preprocess_views_view__genres__page(&$variables) {
  $config_pages = \Drupal::service('config_pages.loader');
  $field_value = $config_pages->getValue('wordings', 'field_taxo_genres_description');
  $variables['genres']['description'] = $field_value[0]['value'];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function ad_theme_preprocess_node__movie__full(&$variables) {
  $config_pages = \Drupal::service('config_pages.loader');
  $config = $config_pages->load('movies');

  $variables['config'] = [
    'block_ad' => [
      'title' => $config->get('field_block_ad_title')->value,
    ],
  ];

  $block = Block::load('ad_movies_contact_block');
  $blockContact = [];
  if ($block) {
    $blockContact = \Drupal::entityTypeManager()
      ->getViewBuilder('block')
      ->view($block);
  }

  $variables['block_contact'] = $blockContact;

  $collections = [];
  $terms = \Drupal::entityTypeManager()
    ->getStorage('taxonomy_term')
    ->loadByProperties(['vid' => 'collection', 'field_display_on_movie_page' => true]);

  foreach ($terms as $term) {
    if ($term->hasField('field_taxo_movies') && !$term->get('field_taxo_movies')->isEmpty()) {
      foreach ($term->get('field_taxo_movies')->referencedEntities() as $referenced_movie) {
        if ($referenced_movie->id() == $variables['node']->id()) {
          $collections[] = [
            'label' => $term->label(),
            'icon' => $term->field_icon_on_movie_page->entity->field_media_image->entity->uri->value ?? NULL,
          ];
          break;
        }
      }
    }
  }

  // Order solutions.
  $offers = [];
  $node = $variables['node'];
  $pg_offers = $node->get('field_offers')->referencedEntities();
  usort($pg_offers, function($a, $b) {
    $a = intval($a->get('field_pg_offer')->entity->get('field_taxo_order')->value);
    $b = intval($b->get('field_pg_offer')->entity->get('field_taxo_order')->value);

    if ($a == $b) {
      return 0;
    }
    return ($a < $b) ? -1 : 1;
  });


  foreach($pg_offers as $pg_offer) {
    $pg_partners = $pg_offer->get('field_pg_partners')->referencedEntities();

    usort($pg_partners, function($a, $b) {
      $a = intval($a->get('field_pg_partner')->entity->get('field_taxo_order')->value);
      $b = intval($b->get('field_pg_partner')->entity->get('field_taxo_order')->value);

      if ($a == $b) {
        return 0;
      }
      return ($a < $b) ? -1 : 1;
    });


    $offers[] = [
      'offer' => $pg_offer,
      'partners' => $pg_partners
    ];
  }


  $variables['block_platforms'] = [
    'title' => $config->get('field_block_platforms_title')->value,
    'no_result' => $config->get('field_block_platforms_no_result')->value,
    'offers' => $offers,
  ];

  $variables['collections'] = $collections;


  $cache_tags = [];
  $offers = $variables['elements']['#node']->get('field_offers')->referencedEntities();

  foreach($offers as $offer) {
    $partners = $offer->get('field_pg_partners')->referencedEntities();

    foreach($partners as $partner) {
      $term = $partner->get('field_pg_partner')->referencedEntities()[0];
      $cache_tags = array_merge($cache_tags, $term->getCacheTags());
    }
  }

  $variables['#cache']['tags'] = $cache_tags;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function ad_theme_preprocess_views_view__search__search_page(&$variables) {
  $block = Block::load('ad_search_contact_block');
  $blockContact = [];
  if ($block) {
    $blockContact = \Drupal::entityTypeManager()
      ->getViewBuilder('block')
      ->view($block);
  }

  $variables['block_contact'] = $blockContact;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function ad_theme_preprocess_taxonomy_term__director__full(&$variables)
{
  $term = $variables['term'];

  $term_id = $term->id();

  $query = \Drupal::entityQuery('node')
    ->condition('type', 'movie')
    ->condition('field_directors', $term_id, 'IN')
    ->condition('field_has_ad', TRUE)
    ->accessCheck(FALSE);

  $nids = $query->execute();

  $nodes = Node::loadMultiple($nids);

  $variables['movies'] = $nodes;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function ad_theme_preprocess_form_element__select(&$variables)
{
  $variables['title'] = $variables['element']['#title']->getUntranslatedString();

  if (isset($variables['element']['#singular_title'])) {
    $variables['singular_title'] = $variables['element']['#singular_title'];
  }

  if (isset($variables['element']['#plural_title'])) {
    $variables['plural_title'] = $variables['element']['#plural_title'];
  }

  if (isset($variables['element']['#is_female'])) {
    $variables['is_female'] = $variables['element']['#is_female'];
  }

  if (isset($variables['element']['#options'])) {
    $variables['options'] = json_encode($variables['element']['#options']);
  }

  if (isset($variables['element']['#value'])) {
    $variables['selected'] = json_encode($variables['element']['#value']);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function ad_theme_preprocess_taxonomy_term__collection__highlighted(&$variables)
{
  $movies = $variables['elements']['#taxonomy_term']->field_taxo_movies;
  $variables['urls'] = [];

  foreach ($movies as $movie) {
    $entity = $movie->entity;
    if (!is_null($entity)) {
      $variables['urls'][$entity->id()] = $entity->toUrl()->toString();
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function ad_theme_preprocess_paragraph__pg_paragraph__full(&$variables)
{
  $cta = $variables['paragraph']->get('field_pg_cta')->referencedEntities();
  if (!empty($cta) && !is_null($cta[0]->get('field_pg_link')->first())) {
    $variables['cta'] = [
      'url' => $cta[0]->get('field_pg_link')->first()->getUrl()->toString(),
      'text' => $cta[0]->get('field_pg_link')->first()->title,
      'target' => ($cta[0]->get('field_pg_is_external')->value == TRUE) ? 'blank' : 'self',
      'external' => ($cta[0]->get('field_pg_is_external')->value == TRUE),
      'style' => $cta[0]->get('field_pg_style')->value,
    ];

    if ($cta[0]->get('field_pg_is_external')->value) {
      $variables['cta']['title'] = $cta[0]->get('field_pg_link')->first()->title;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function ad_theme_preprocess_paragraph__pg_card__full(&$variables)
{
  $paragraph = $variables['paragraph'];

  $variables['link'] = [
    'url' => $paragraph->get('field_pg_link')->first()->getUrl()->toString(),
    'text' => $paragraph->get('field_pg_link')->first()->title,
    'target' => ($paragraph->get('field_pg_is_external')->value == TRUE) ? '_blank' : '_self',
    'external' => ($paragraph->get('field_pg_is_external')->value == TRUE),
  ];

  if ($paragraph->get('field_pg_is_external')->value) {
    $variables['link']['title'] = $paragraph->get('field_pg_link')->first()->title . ' - nouvelle fenêtre';
  }

}

/**
 * Implements hook_preprocess_HOOK().
 */
function ad_theme_preprocess_paragraph__pg_horizontal_card__full(&$variables)
{
  $paragraph = $variables['paragraph'];

  $variables['link'] = [
    'url' => $paragraph->get('field_pg_link')->first()->getUrl()->toString(),
    'text' => $paragraph->get('field_pg_link')->first()->title,
    'target' => ($paragraph->get('field_pg_is_external')->value == TRUE) ? '_blank' : '_self',
    'external' => ($paragraph->get('field_pg_is_external')->value == TRUE),
  ];

  if ($paragraph->get('field_pg_is_external')->value) {
    $variables['link']['title'] = $paragraph->get('field_pg_link')->first()->title . ' - nouvelle fenêtre';
  }

}

/**
 * Implements hook_preprocess_HOOK().
 */
function ad_theme_preprocess_paragraph__pg_video_iframe__full(&$variables)
{
  $cta = $variables['paragraph']->get('field_pg_cta')->referencedEntities();
  if (!empty($cta) && !is_null($cta[0]->get('field_pg_link')->first())) {
    $variables['cta'] = [
      'url' => $cta[0]->get('field_pg_link')->first()->getUrl()->toString(),
      'text' => $cta[0]->get('field_pg_link')->first()->title,
      'target' => ($cta[0]->get('field_pg_is_external')->value == TRUE) ? 'blank' : 'self',
      'external' => ($cta[0]->get('field_pg_is_external')->value == TRUE),
      'style' => $cta[0]->get('field_pg_style')->value,
    ];

    if ($cta[0]->get('field_pg_is_external')->value) {
      $variables['cta']['title'] = $cta[0]->get('field_pg_link')->first()->title;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function ad_theme_preprocess_html(&$variables)
{
  $config_pages = \Drupal::service('config_pages.loader');
  $config = $config_pages->load('patrimony');
  $isEnabled = $config->get('field_enable_matomo')->value;

  if ($isEnabled) {
    $variables['matomo'] = [
      'enabled' => $isEnabled,
    ];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function ad_theme_preprocess_node__movie__card(&$variables)
{
  // Order solutions.
  $offers = [];
  $node = $variables['node'];
  $pg_offers = $node->get('field_offers')->referencedEntities();
  usort($pg_offers, function($a, $b) {
    $a = intval($a->get('field_pg_offer')->entity->get('field_taxo_order')->value);
    $b = intval($b->get('field_pg_offer')->entity->get('field_taxo_order')->value);

    if ($a == $b) {
      return 0;
    }
    return ($a < $b) ? -1 : 1;
  });

  $pg_partners = $pg_offers[0]->get('field_pg_partners')->referencedEntities();

  usort($pg_partners, function($a, $b) {
    $a = intval($a->get('field_pg_partner')->entity->get('field_taxo_order')->value);
    $b = intval($b->get('field_pg_partner')->entity->get('field_taxo_order')->value);

    if ($a == $b) {
      return 0;
    }
    return ($a < $b) ? -1 : 1;
  });


  if (!is_null($pg_partners[0])){
    $pg = $pg_partners[0];
    $endDate = $pg->get('field_pg_end_rights') ?? NULL;

    if (!is_null($endDate->value)) {
      /** @var \Drupal\Core\Datetime\DateFormatterInterface $date_formatter */
      $date_formatter = \Drupal::service('date.formatter');

      $timestamp = strtotime($endDate->value);
      $formatted_date = $date_formatter->format($timestamp, 'custom', 'd/m/Y');
    }

    $variables['partner'] = [
      'name' => $pg->get('field_pg_partner')->entity->getName() ?? NULL,
      'pronunciation' => $pg->get('field_pg_partner')->entity->get('field_taxo_pronunciation')->value ?? NULL,
      'end_date' => $formatted_date ?? NULL,
    ];
  }
}
